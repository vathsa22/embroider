{"version":3,"file":"synthesize-template-only-components.js","sourceRoot":"","sources":["synthesize-template-only-components.ts"],"names":[],"mappings":"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","sourcesContent":["import Plugin from 'broccoli-plugin';\nimport type { Node } from 'broccoli-node-api';\nimport { join, basename, extname } from 'path';\nimport walkSync, { type Entry } from 'walk-sync';\nimport { removeSync, outputFileSync, pathExistsSync, readFileSync } from 'fs-extra';\n\nconst source = `import templateOnlyComponent from '@ember/component/template-only';\nexport default templateOnlyComponent();`;\n\nconst jsExtensions = ['.js', '.ts', '.mjs', '.mts'];\n\ntype Emitted =\n  | { type: 'template-only-component'; outputPath: string }\n  | { type: 'template-import'; outputPath: string; mtime: number };\n\ntype TemplateOnly = { template: Entry; javascript: undefined };\ntype JavaScriptOnly = { template: undefined; javascript: Entry };\ntype Colocated = { template: Entry; javascript: Entry };\ntype ComponentFiles = TemplateOnly | JavaScriptOnly | Colocated;\n\nfunction importTemplate(files: { template: Entry }): string {\n  return `/* import __COLOCATED_TEMPLATE__ from './${basename(files.template.relativePath)}'; */\\n`;\n}\n\nexport default class SynthesizeTemplateOnlyComponents extends Plugin {\n  private emitted = new Map() as Map<string, Emitted>;\n  private allowedPaths: string[];\n  private templateExtensions: string[];\n\n  constructor(tree: Node, params: { allowedPaths: string[]; templateExtensions: string[] }) {\n    super([tree], {\n      annotation: `synthesize-template-only-components:${params.allowedPaths.join(':')}`,\n      persistentOutput: true,\n      needsCache: false,\n    });\n    this.allowedPaths = params.allowedPaths;\n    this.templateExtensions = params.templateExtensions;\n  }\n\n  async build() {\n    let unneeded = new Set(this.emitted.keys());\n    for (let dir of this.allowedPaths) {\n      let entries = this.crawl(join(this.inputPaths[0], dir));\n      for (let [name, files] of entries) {\n        let fullName = join(this.outputPath, dir, name);\n        unneeded.delete(fullName);\n        if (files.javascript && files.template) {\n          this.addTemplateImport(fullName, files);\n        } else if (files.template) {\n          this.addTemplateOnlyComponent(fullName, files);\n        } else {\n          this.remove(fullName);\n        }\n      }\n    }\n    for (let fullName of unneeded) {\n      this.remove(fullName);\n    }\n  }\n\n  private addTemplateOnlyComponent(filename: string, files: TemplateOnly) {\n    const emitted = this.emitted.get(filename);\n\n    if (emitted?.type !== 'template-only-component') {\n      // special case: ember-cli doesn't allow template-only components named\n      // \"template.hbs\" because there are too many people doing a \"pods-like\"\n      // layout that happens to match that pattern.ðŸ¤®\n      if (basename(filename) !== 'template') {\n        const outputPath = filename + '.js';\n        outputFileSync(outputPath, importTemplate(files) + source, 'utf8');\n        this.emitted.set(filename, { type: 'template-only-component', outputPath });\n\n        if (emitted && emitted.outputPath !== outputPath) {\n          removeSync(emitted.outputPath);\n        }\n      }\n    }\n  }\n\n  private addTemplateImport(filename: string, files: Colocated) {\n    const emitted = this.emitted.get(filename);\n    const mtime = files.javascript.mtime;\n\n    if (!(emitted?.type === 'template-import' && emitted.mtime === mtime)) {\n      const inputSource = readFileSync(files.javascript.fullPath, { encoding: 'utf8' });\n      const outputPath = filename + extname(files.javascript.relativePath);\n      // If we are ok with appending instead, copy + append maybe more efficient?\n      outputFileSync(outputPath, importTemplate(files) + inputSource, 'utf8');\n      this.emitted.set(filename, { type: 'template-import', outputPath, mtime });\n\n      if (emitted && emitted.outputPath !== outputPath) {\n        removeSync(emitted.outputPath);\n      }\n    }\n  }\n\n  private remove(filename: string) {\n    const emitted = this.emitted.get(filename);\n\n    if (emitted) {\n      removeSync(emitted.outputPath);\n      this.emitted.delete(filename);\n    }\n  }\n\n  private crawl(dir: string): Map<string, ComponentFiles> {\n    const entries = new Map<string, ComponentFiles>();\n\n    if (pathExistsSync(dir)) {\n      for (let entry of walkSync.entries(dir, { directories: false })) {\n        const templateExtension = this.templateExtensions.find(ext => entry.relativePath.endsWith(ext));\n        if (templateExtension) {\n          const key = entry.relativePath.slice(0, -1 * templateExtension.length);\n          entries.set(key, { template: entry, javascript: entries.get(key)?.javascript });\n          continue;\n        }\n\n        const jsExtension = jsExtensions.find(ext => entry.relativePath.endsWith(ext));\n        if (jsExtension) {\n          const key = entry.relativePath.slice(0, -1 * jsExtension.length);\n          entries.set(key, { template: entries.get(key)?.template, javascript: entry });\n          continue;\n        }\n      }\n    }\n\n    return entries;\n  }\n}\n"]}