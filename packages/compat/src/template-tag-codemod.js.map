{"version":3,"file":"template-tag-codemod.js","sourceRoot":"","sources":["template-tag-codemod.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as compatBuild } from './default-pipeline';\nimport type { EmberAppInstance } from '@embroider/core';\nimport type { Node, InputNode } from 'broccoli-node-api';\nimport { join, relative, resolve } from 'path';\nimport type { types as t } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport { statSync, readdirSync, readFileSync, writeFileSync } from 'fs';\nimport Plugin from 'broccoli-plugin';\nimport { transformSync } from '@babel/core';\nimport { hbsToJS, ResolverLoader } from '@embroider/core';\nimport { ImportUtil } from 'babel-import-util';\nimport ResolverTransform from './resolver-transform';\nimport { spawn } from 'child_process';\nimport { locateEmbroiderWorkingDir } from '@embroider/core';\n\nexport interface TemplateTagCodemodOptions {\n  shouldTransformPath: (outputPath: string) => boolean;\n  dryRun: boolean;\n}\n\nexport default function templateTagCodemod(\n  emberApp: EmberAppInstance,\n  { shouldTransformPath = (() => true) as TemplateTagCodemodOptions['shouldTransformPath'], dryRun = false } = {}\n): Node {\n  return new TemplateTagCodemodPlugin(\n    [\n      compatBuild(emberApp, undefined, {\n        staticAddonTrees: true,\n        staticAddonTestSupportTrees: true,\n        staticComponents: true,\n        staticHelpers: true,\n        staticModifiers: true,\n        staticEmberSource: true,\n        amdCompatibility: {\n          es: [],\n        },\n      }),\n    ],\n    { shouldTransformPath, dryRun }\n  );\n}\nclass TemplateTagCodemodPlugin extends Plugin {\n  constructor(inputNodes: InputNode[], readonly options: TemplateTagCodemodOptions) {\n    super(inputNodes, {\n      name: 'TemplateTagCodemodPlugin',\n    });\n  }\n  async build() {\n    function* walkSync(dir: string): Generator<string> {\n      const files = readdirSync(dir);\n\n      for (const file of files) {\n        const pathToFile = join(dir, file);\n        const isDirectory = statSync(pathToFile).isDirectory();\n        if (isDirectory) {\n          yield* walkSync(pathToFile);\n        } else {\n          yield pathToFile;\n        }\n      }\n    }\n    this.inputPaths[0];\n    const tmp_path = readFileSync(this.inputPaths[0] + '/.stage2-output').toLocaleString();\n    const compatPattern = /#embroider_compat\\/(?<type>[^\\/]+)\\/(?<rest>.*)/;\n    const resolver = new ResolverLoader(process.cwd()).resolver;\n    const hbs_file_test = /[\\\\/]rewritten-app[\\\\/]components[\\\\/].*\\.hbs$/;\n    // locate ember-source for the host app so we know which version to insert builtIns for\n    const emberSourceEntrypoint = require.resolve('ember-source', { paths: [process.cwd()] });\n    const emberVersion = JSON.parse(readFileSync(join(emberSourceEntrypoint, '../../package.json')).toString()).version;\n\n    for await (const current_file of walkSync(tmp_path)) {\n      if (hbs_file_test.test(current_file) && this.options.shouldTransformPath(current_file)) {\n        const template_file_src = readFileSync(current_file).toLocaleString();\n        const ember_template_compiler = resolver.nodeResolve(\n          'ember-source/vendor/ember/ember-template-compiler',\n          resolve(locateEmbroiderWorkingDir(process.cwd()), 'rewritten-app', 'package.json')\n        );\n        if (ember_template_compiler.type === 'not_found') {\n          throw 'This will not ever be true';\n        }\n\n        const embroider_compat_path = require.resolve('@embroider/compat', { paths: [process.cwd()] });\n        const babel_plugin_ember_template_compilation = require.resolve('babel-plugin-ember-template-compilation', {\n          paths: [embroider_compat_path],\n        });\n        const babel_plugin_syntax_decorators = require.resolve('@babel/plugin-syntax-decorators', {\n          paths: [embroider_compat_path],\n        });\n        let src =\n          transformSync(hbsToJS(template_file_src), {\n            plugins: [\n              [\n                babel_plugin_ember_template_compilation,\n                {\n                  compilerPath: ember_template_compiler.filename,\n                  transforms: [ResolverTransform({ appRoot: process.cwd(), emberVersion: emberVersion })],\n                  targetFormat: 'hbs',\n                },\n              ],\n            ],\n          })?.code ?? '';\n        const import_bucket: NodePath<t.ImportDeclaration>[] = [];\n        let transformed_template_value = '';\n        transformSync(src, {\n          plugins: [\n            function template_tag_extractor(): unknown {\n              return {\n                visitor: {\n                  ImportDeclaration(import_declaration: NodePath<t.ImportDeclaration>) {\n                    const extractor = import_declaration.node.source.value.match(compatPattern);\n                    if (extractor) {\n                      const result = resolver.nodeResolve(extractor[0], current_file);\n                      if (result.type === 'real') {\n                        // find package\n                        const owner_package = resolver.packageCache.ownerOfFile(result.filename);\n                        // change import to real one\n                        import_declaration.node.source.value =\n                          owner_package!.name + '/' + extractor[1] + '/' + extractor[2];\n                        import_bucket.push(import_declaration);\n                      }\n                    } else if (import_declaration.node.source.value.indexOf('@ember/template-compilation') === -1) {\n                      import_bucket.push(import_declaration);\n                    }\n                  },\n                  CallExpression(path: NodePath<t.CallExpression>) {\n                    // reverse of hbs to js\n                    // extract the template string to put into template tag in backing class\n                    if (\n                      'name' in path.node.callee &&\n                      path.node.callee.name === 'precompileTemplate' &&\n                      path.node.arguments &&\n                      'value' in path.node.arguments[0]\n                    ) {\n                      transformed_template_value = `<template>\\n\\t${path.node.arguments[0].value}\\n</template>`;\n                    }\n                  },\n                },\n              };\n            },\n          ],\n        });\n\n        //find backing class\n        const backing_class_resolution = resolver.nodeResolve(\n          '#embroider_compat/' + relative(tmp_path, current_file).replace(/[\\\\]/g, '/').slice(0, -4),\n          tmp_path\n        );\n\n        const backing_class_filename = 'filename' in backing_class_resolution ? backing_class_resolution.filename : '';\n        const backing_class_src = readFileSync(backing_class_filename).toString();\n        const magic_string = '__MAGIC_STRING_FOR_TEMPLATE_TAG_REPLACE__';\n        const is_template_only =\n          backing_class_src.indexOf(\"import templateOnlyComponent from '@ember/component/template-only';\") !== -1;\n\n        src = transformSync(backing_class_src, {\n          plugins: [\n            [babel_plugin_syntax_decorators, { decoratorsBeforeExport: true }],\n            function glimmer_syntax_creator(babel): unknown {\n              return {\n                name: 'test',\n                visitor: {\n                  Program: {\n                    enter(path: NodePath<t.Program>) {\n                      // Always instantiate the ImportUtil instance at the Program scope\n                      const importUtil = new ImportUtil(babel.types, path);\n                      const first_node = path.get('body')[0];\n                      if (\n                        first_node &&\n                        first_node.node &&\n                        first_node.node.leadingComments &&\n                        first_node.node.leadingComments[0]?.value.includes('__COLOCATED_TEMPLATE__')\n                      ) {\n                        //remove magic comment\n                        first_node.node.leadingComments.splice(0, 1);\n                      }\n                      for (const template_import of import_bucket) {\n                        for (let i = 0, len = template_import.node.specifiers.length; i < len; ++i) {\n                          const specifier = template_import.node.specifiers[i];\n                          if (specifier.type === 'ImportDefaultSpecifier') {\n                            importUtil.import(path, template_import.node.source.value, 'default', specifier.local.name);\n                          } else if (specifier.type === 'ImportSpecifier') {\n                            importUtil.import(path, template_import.node.source.value, specifier.local.name);\n                          }\n                        }\n                      }\n                    },\n                  },\n                  ImportDeclaration(import_declaration: NodePath<t.ImportDeclaration>) {\n                    if (import_declaration.node.source.value.indexOf('@ember/component/template-only') !== -1) {\n                      import_declaration.remove();\n                    }\n                  },\n                  ExportDefaultDeclaration(path: NodePath<t.ExportDefaultDeclaration>) {\n                    path.traverse({\n                      ClassBody(path) {\n                        const classbody_nodes = path.get('body');\n                        //add magic string to be replaces with the contents of the template tag\n                        classbody_nodes[classbody_nodes.length - 1].addComment('trailing', magic_string, false);\n                      },\n                    });\n                  },\n                },\n              };\n            },\n          ],\n        })!.code!.replace(`/*${magic_string}*/`, transformed_template_value);\n        if (is_template_only) {\n          // because we can't inject a comment as the default export\n          // we replace the known exported string\n          src = src.replace('templateOnlyComponent()', transformed_template_value);\n        }\n\n        const dryRun = this.options.dryRun ? '--dry-run' : '';\n        // work out original file path in app tree\n        const app_relative_path = join('app', relative(tmp_path, current_file));\n        const new_file_path = app_relative_path.slice(0, -4) + '.gjs';\n\n        // write glimmer file out\n        if (this.options.dryRun) {\n          console.log('Write new file', new_file_path, src);\n        } else {\n          writeFileSync(join(process.cwd(), new_file_path), src, { flag: 'wx+' });\n        }\n\n        // git rm old files (js/ts if exists + hbs)\n        let rm_hbs = await execute(`git rm ${app_relative_path} ${dryRun}`, {\n          pwd: process.cwd(),\n        });\n        console.log(rm_hbs.output);\n\n        if (!is_template_only) {\n          // remove backing class only if it's not a template only component\n          // resolve repative path to rewritten-app\n          const app_relative_path = join('app', relative(tmp_path, backing_class_filename));\n          let rm_js = await execute(`git rm ${app_relative_path} ${dryRun}`, {\n            pwd: process.cwd(),\n          });\n\n          console.log(rm_js.output);\n        }\n      }\n    }\n  }\n}\n\nasync function execute(\n  shellCommand: string,\n  opts?: { env?: Record<string, string>; pwd?: string }\n): Promise<{\n  exitCode: number;\n  stderr: string;\n  stdout: string;\n  output: string;\n}> {\n  let env: Record<string, string | undefined> | undefined;\n  if (opts?.env) {\n    env = { ...process.env, ...opts.env };\n  }\n  let child = spawn(shellCommand, {\n    stdio: ['inherit', 'pipe', 'pipe'],\n    cwd: opts?.pwd,\n    shell: true,\n    env,\n  });\n  let stderrBuffer: string[] = [];\n  let stdoutBuffer: string[] = [];\n  let combinedBuffer: string[] = [];\n  child.stderr.on('data', data => {\n    stderrBuffer.push(data);\n    combinedBuffer.push(data);\n  });\n  child.stdout.on('data', data => {\n    stdoutBuffer.push(data);\n    combinedBuffer.push(data);\n  });\n  return new Promise(resolve => {\n    child.on('close', (exitCode: number) => {\n      resolve({\n        exitCode,\n        get stdout() {\n          return stdoutBuffer.join('');\n        },\n        get stderr() {\n          return stderrBuffer.join('');\n        },\n        get output() {\n          return combinedBuffer.join('');\n        },\n      });\n    });\n  });\n}\n"]}