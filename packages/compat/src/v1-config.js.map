{"version":3,"file":"v1-config.js","sourceRoot":"","sources":["v1-config.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAqC;AAErC,+BAA4B;AAC5B,uCAAwD;AAUxD,MAAa,QAAS,SAAQ,yBAAM;IAElC,YAAY,UAAgB,EAAU,GAAW;QAC/C,KAAK,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;QADY,QAAG,GAAH,GAAG,CAAQ;IAEjD,CAAC;IACD,KAAK;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,uBAAY,EAAC,IAAA,WAAI,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IACnH,CAAC;IACD,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAdD,4BAcC;AAED,MAAa,aAAc,SAAQ,yBAAM;IAEvC,YAAoB,SAAmB,EAAU,iBAA0B,EAAU,aAAwB;QAC3G,KAAK,CAAC,CAAC,SAAS,EAAE,aAAyB,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YAC5D,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;QAJe,cAAS,GAAT,SAAS,CAAU;QAAU,sBAAiB,GAAjB,iBAAiB,CAAS;QAAU,kBAAa,GAAb,aAAa,CAAW;IAK7G,CAAC;IACD,KAAK;QACH,IAAI,QAAQ,GAAG,IAAA,WAAI,EAAC,IAAI,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;QAC9D,IAAI,QAAQ,CAAC;QACb,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,QAAQ,GAAG,UAAU,EAAE,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;gBACvB,QAAQ,GAAG;;;;kBAID,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;;kBAE/C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;;;SAGpD,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,kBAAkB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC;YAC9E,CAAC;QACH,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,KAAK,QAAQ,EAAE,CAAC;YACzD,IAAA,yBAAc,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;IAC/B,CAAC;CACF;AAlCD,sCAkCC;AAED,SAAS,UAAU;IACjB,0CAA0C;IAC1C,0DAA0D;IAC1D,sEAAsE;IACtE,OAAO;;;;GAIN,CAAC;AACJ,CAAC","sourcesContent":["import Plugin from 'broccoli-plugin';\nimport type { Node } from 'broccoli-node-api';\nimport { join } from 'path';\nimport { readFileSync, outputFileSync } from 'fs-extra';\n\nexport interface ConfigContents {\n  modulePrefix: string;\n  podModulePrefix?: string;\n  EmberENV: unknown;\n  APP: unknown;\n  rootURL: string;\n}\n\nexport class V1Config extends Plugin {\n  private lastConfig: ConfigContents | undefined;\n  constructor(configTree: Node, private env: string) {\n    super([configTree], {});\n  }\n  build() {\n    this.lastConfig = JSON.parse(readFileSync(join(this.inputPaths[0], 'environments', `${this.env}.json`), 'utf8'));\n  }\n  readConfig() {\n    if (!this.lastConfig) {\n      throw new Error(`V1Config not available until after the build`);\n    }\n    return this.lastConfig;\n  }\n}\n\nexport class WriteV1Config extends Plugin {\n  private lastContents: string | undefined;\n  constructor(private inputTree: V1Config, private storeConfigInMeta: boolean, private testInputTree?: V1Config) {\n    super([inputTree, testInputTree as V1Config].filter(Boolean), {\n      persistentOutput: true,\n      needsCache: false,\n    });\n  }\n  build() {\n    let filename = join(this.outputPath, 'config/environment.js');\n    let contents;\n    if (this.storeConfigInMeta) {\n      contents = metaLoader();\n    } else {\n      if (this.testInputTree) {\n        contents = `\n        import { isTesting } from '@embroider/macros';\n        let env;\n        if (isTesting()) {\n          env = ${JSON.stringify(this.testInputTree.readConfig())};\n        } else {\n          env = ${JSON.stringify(this.inputTree.readConfig())};\n        }\n        export default env;\n        `;\n      } else {\n        contents = `export default ${JSON.stringify(this.inputTree.readConfig())};`;\n      }\n    }\n    if (!this.lastContents || this.lastContents !== contents) {\n      outputFileSync(filename, contents);\n    }\n    this.lastContents = contents;\n  }\n}\n\nfunction metaLoader() {\n  // Supporting config content as JS Module.\n  // Wrapping the content with immediate invoked function as\n  // replaced content for config-module was meant to support AMD module.\n  return `\n    export default (function() {\n      {{content-for 'config-module'}}\n    })().default;\n  `;\n}\n"]}