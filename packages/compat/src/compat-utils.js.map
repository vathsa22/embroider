{"version":3,"file":"compat-utils.js","sourceRoot":"","sources":["compat-utils.ts"],"names":[],"mappings":";;;;;AAMA,8CAOC;AAED,gDAOC;AAED,wDAOC;AAMD,0DAEC;AAvCD,iEAAyC;AAEzC,sDAA8B;AAC9B,+BAA8C;AAG9C,SAAgB,iBAAiB,CAAC,WAAwB,EAAE,WAAmB,EAAE,OAAO,GAAG,GAAG;IAC5F,IAAI,GAAG,GAAG,IAAA,mBAAS,EAAC,WAAW,CAAC,CAAC;IACjC,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC1B,GAAG,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC5B,CAAC;IACD,GAAG,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;IAC5C,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,kBAAkB,CAAC,IAAwB,EAAE,SAAiB;IAC5E,IAAI,GAAG,IAAA,mBAAS,EAAC,IAAI,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE,CAAC;QAC7C,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC;IAChC,CAAC;IACD,IAAI,CAAC,kBAAkB,CAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1C,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,sBAAsB,CAAC,IAAe,EAAE,SAAiB;IACvE,IAAI,GAAG,IAAA,mBAAS,EAAC,IAAI,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC;QAClD,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC;IACrC,CAAC;IACD,IAAI,CAAC,uBAAuB,CAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,OAAO,IAAI,CAAC;AACd,CAAC;AAED,yEAAyE;AACzE,gFAAgF;AAChF,EAAE;AACF,+EAA+E;AAC/E,SAAgB,uBAAuB,CAAC,OAA2D,EAAE;IACnG,OAAO,CAAC,0BAA0B,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAChH,CAAC;AAED,SAAS,0BAA0B;IACjC,OAAO;QACL,OAAO,EAAE;YACP,sBAAsB,CAAC,IAAS,EAAE,KAAU;gBAC1C,IACE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC7F,IAAI,CAAC,IAAI,CAAC,MAAM;oBAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,eAAe,EACzC,CAAC;oBACD,IAAI,CAAC;wBACH,iBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;oBAC5E,CAAC;oBAAC,OAAO,GAAG,EAAE,CAAC;wBACb,IAAI,CAAC,MAAM,EAAE,CAAC;oBAChB,CAAC;gBACH,CAAC;YACH,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AACA,0BAAkC,CAAC,OAAO,GAAG;IAC5C,OAAO,IAAA,cAAW,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC,CAAC","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport type { AddonMeta, PackageInfo } from '@embroider/core';\nimport resolve from 'resolve';\nimport { resolve as pathResolve } from 'path';\nimport type { PluginItem } from '@babel/core';\n\nexport function addPeerDependency(packageJSON: PackageInfo, packageName: string, version = '*') {\n  let pkg = cloneDeep(packageJSON);\n  if (!pkg.peerDependencies) {\n    pkg.peerDependencies = {};\n  }\n  pkg.peerDependencies[packageName] = version;\n  return pkg;\n}\n\nexport function forceIncludeModule(meta: Partial<AddonMeta>, localPath: string) {\n  meta = cloneDeep(meta);\n  if (!meta.hasOwnProperty('implicit-modules')) {\n    meta['implicit-modules'] = [];\n  }\n  meta['implicit-modules']!.push(localPath);\n  return meta;\n}\n\nexport function forceIncludeTestModule(meta: AddonMeta, localPath: string) {\n  meta = cloneDeep(meta);\n  if (!meta.hasOwnProperty('implicit-test-modules')) {\n    meta['implicit-test-modules'] = [];\n  }\n  meta['implicit-test-modules']!.push(localPath);\n  return meta;\n}\n\n// A babel plugin that removes reexports that point at nonexistent files.\n// Unfortunately needed because some popular addons have bogus unused reexports.\n//\n// Append the output of this function to the `plugins` array in a babel config.\nexport function stripBadReexportsPlugin(opts: { filenamePattern?: RegExp; resolveBase?: string } = {}): PluginItem {\n  return [stripBadReexportsTransform, { filenamePattern: opts.filenamePattern, resolveBase: opts.resolveBase }];\n}\n\nfunction stripBadReexportsTransform() {\n  return {\n    visitor: {\n      ExportNamedDeclaration(path: any, state: any) {\n        if (\n          (!state.opts.filenamePattern || state.opts.filenamePattern.test(path.hub.file.opts.filename)) &&\n          path.node.source &&\n          path.node.source.type === 'StringLiteral'\n        ) {\n          try {\n            resolve.sync(path.node.source.value, { basedir: state.opts.resolveBase });\n          } catch (err) {\n            path.remove();\n          }\n        }\n      },\n    },\n  };\n}\n(stripBadReexportsTransform as any).baseDir = function () {\n  return pathResolve(__dirname, '..');\n};\n"]}