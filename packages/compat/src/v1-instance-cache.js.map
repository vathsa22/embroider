{"version":3,"file":"v1-instance-cache.js","sourceRoot":"","sources":["v1-instance-cache.ts"],"names":[],"mappings":";AAAA,4EAA4E;AAC5E,6EAA6E;AAC7E,iCAAiC;;;;;AAGjC,0DAAiC;AACjC,uCAA0C;AAE1C,0CAA8C;AAG9C,MAAqB,eAAe;IAOlC,YAAoB,GAAc,EAAU,YAA0B;QAAlD,QAAG,GAAH,GAAG,CAAW;QAAU,iBAAY,GAAZ,YAAY,CAAc;QANtE,6EAA6E;QAC7E,8EAA8E;QAC9E,4CAA4C;QACpC,WAAM,GAA2B,IAAI,GAAG,EAAE,CAAC;QAIjD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAElB,uEAAuE;QACvE,iCAAiC;QAChC,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,MAA0B,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7E,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,YAAY,CAAC,aAA4B;QAC/C,IAAI,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;QACzC,mEAAmE;QACnE,2DAA2D;QAC3D,IAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAEpE,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;YAC1B,OAAO,kBAAO,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,IAAI,IAAI,GAAG,GAAG,SAAS,oBAAoB,WAAW,KAAK,CAAC;YAC5D,IAAI,IAAA,yBAAc,EAAC,IAAI,CAAC,EAAE,CAAC;gBACzB,iEAAiE;gBACjE,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;YACvC,CAAC;QACH,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,kBAAO,CAAC;QACjB,CAAC;QAED,IAAI,YAAY,CAAC,kBAAkB,EAAE,CAAC;YACpC,OAAO,YAAY,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,kBAAO,CAAC;QACjF,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,QAAQ,CAAC,aAA4B;QAC3C,uEAAuE;QACvE,6DAA6D;QAC7D,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;QACnB,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrG,IAAI,IAAI,GAAG,IAAA,kBAAW,EAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;CACF;AA9DD,kCA8DC","sourcesContent":["// All access to class ember-cli-provided Addon and EmberApp instances of v1\n// packages is supposed to go through here. This lets us control the boundary\n// between the new and old words.\n\nimport type { V1AddonConstructor } from './v1-addon';\nimport V1Addon from './v1-addon';\nimport { pathExistsSync } from 'fs-extra';\nimport type { AddonInstance, PackageCache } from '@embroider/core';\nimport { getOrCreate } from '@embroider/core';\nimport type CompatApp from './compat-app';\n\nexport default class V1InstanceCache {\n  // maps from package root directories to known V1 instances of that packages.\n  // There can be many because a single copy of an addon may be consumed by many\n  // other packages and each gets an instance.\n  private addons: Map<string, V1Addon[]> = new Map();\n  private orderIdx: number;\n\n  constructor(private app: CompatApp, private packageCache: PackageCache) {\n    this.app = app;\n    this.orderIdx = 0;\n\n    // no reason to do this on demand because the legacy ember app instance\n    // already loaded all descendants\n    (app.legacyEmberAppInstance.project.addons as AddonInstance[]).forEach(addon => {\n      this.addAddon(addon);\n    });\n  }\n\n  private adapterClass(addonInstance: AddonInstance): V1AddonConstructor {\n    let packageName = addonInstance.pkg.name;\n    // if the user registered something (including \"null\", which allows\n    // disabling the built-in adapters), that takes precedence.\n    let AdapterClass = this.app.options.compatAdapters.get(packageName);\n\n    if (AdapterClass === null) {\n      return V1Addon;\n    }\n\n    if (!AdapterClass) {\n      let path = `${__dirname}/compat-adapters/${packageName}.js`;\n      if (pathExistsSync(path)) {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        AdapterClass = require(path).default;\n      }\n    }\n\n    if (!AdapterClass) {\n      return V1Addon;\n    }\n\n    if (AdapterClass.shouldApplyAdapter) {\n      return AdapterClass.shouldApplyAdapter(addonInstance) ? AdapterClass : V1Addon;\n    }\n\n    return AdapterClass;\n  }\n\n  private addAddon(addonInstance: AddonInstance) {\n    // Traverse and add any nested addons. This must happen _before_ we add\n    // the addon itself to correctly preserve the addon ordering.\n    addonInstance.addons.forEach(a => this.addAddon(a));\n\n    this.orderIdx += 1;\n    let Klass = this.adapterClass(addonInstance);\n    let v1Addon = new Klass(addonInstance, this.app.options, this.app, this.packageCache, this.orderIdx);\n    let pkgs = getOrCreate(this.addons, v1Addon.root, () => []);\n    pkgs.push(v1Addon);\n  }\n\n  getAddons(root: string): V1Addon[] {\n    return this.addons.get(root) || [];\n  }\n}\n"]}