{"version":3,"file":"audit-cli.js","sourceRoot":"","sources":["audit-cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { readFileSync, readJSONSync, writeFileSync } from 'fs-extra';\nimport { resolve } from 'path';\nimport yargs from 'yargs/yargs';\nimport type { Finding } from './audit';\nimport { Audit, AuditResults, isBuildError } from './audit';\n\n// slightly wacky because yargs types don't cover this, but you can't access the\n// other documented place to find `hideBin` on node < 12.17\nconst { hideBin } = yargs as any as {\n  hideBin(argv: readonly string[]): readonly string[];\n};\n\nfunction runCLI() {\n  return yargs(hideBin(process.argv))\n    .command(\n      '$0',\n      'audit your app for embroider compatibility problems',\n      yargs => {\n        return yargs\n          .option('debug', {\n            alias: 'd',\n            type: 'boolean',\n            description: 'Add debug logging about the audit itself',\n            default: false,\n          })\n          .option('json', {\n            alias: 'j',\n            type: 'boolean',\n            description: 'Print results in JSON format',\n            default: false,\n          })\n          .option('reuse-build', {\n            alias: 'r',\n            type: 'boolean',\n            description: 'Reuse previous build',\n            default: false,\n          })\n          .option('load', {\n            alias: 'l',\n            type: 'string',\n            description: 'Load previous audit results from a JSON file instead of running a new audit',\n          })\n          .option('save', {\n            alias: 's',\n            type: 'string',\n            description: 'Save audit results as a JSON file.',\n          })\n          .option('app', {\n            type: 'string',\n            description: 'Path to your app',\n            default: process.cwd(),\n          })\n          .option('filter', {\n            type: 'string',\n            description:\n              'Path to a JS file that describes which findings to silence. Generate the initial file using `--create-filter`.',\n          })\n          .option('create-filter', {\n            type: 'string',\n            description:\n              'Path to a JS file where we will create a filter that will silence all your current findings. Pass it back into future audits via --filter',\n          })\n          .fail(function (_, err, _yargs) {\n            if (isBuildError(err)) {\n              process.stderr.write(err.message + '\\n');\n            } else {\n              console.error(err);\n            }\n            process.exit(1);\n          });\n      },\n      async options => {\n        let filter = loadFilter(options);\n        let results: AuditResults;\n        if (options.load) {\n          results = new AuditResults();\n          Object.assign(results, readJSONSync(options.load));\n        } else {\n          results = await Audit.run(options);\n        }\n        if (options.save) {\n          writeFileSync(options.save, JSON.stringify(results, null, 2));\n        }\n        applyFilter(filter, results);\n        if (options.json) {\n          process.stdout.write(JSON.stringify(results, null, 2) + '\\n');\n        } else {\n          process.stdout.write(results.humanReadable());\n        }\n        if (options['create-filter']) {\n          createFilter(options['create-filter'], results);\n        }\n        process.exit(results.perfect ? 0 : 1);\n      }\n    )\n    .command(\n      'pretty',\n      'format JSON audit results as pretty human-readable results',\n      yargs => {\n        return yargs.option('filter', {\n          type: 'string',\n          description:\n            'Path to a JS file that describes which findings to silence. Generate the file using `embroider-compat-audit acknowledge`',\n        });\n      },\n      async options => {\n        let filter = loadFilter(options);\n        let results = new AuditResults();\n        // process.stdin.fd is a documented public API. The Node typings don't\n        // seem to know about it.\n        Object.assign(results, JSON.parse(readFileSync((process.stdin as any).fd, 'utf8')));\n        applyFilter(filter, results);\n        process.stdout.write(results.humanReadable());\n        process.exit(0);\n      }\n    )\n    .command(\n      'acknowledge',\n      'Pipe your audit JSON to this command to generate a filter file that will silence the current issues. Pass the filter file into your next audit via --filter. Delete findings out of the filter file as you address them.',\n      yargs => yargs,\n      async () => {\n        let results = new AuditResults();\n        // process.stdin.fd is a documented public API. The Node typings don't\n        // seem to know about it.\n        Object.assign(results, JSON.parse(readFileSync((process.stdin as any).fd, 'utf8')));\n        let findings = results.findings.map(f => ({\n          filename: f.filename,\n          message: f.message,\n          detail: f.detail,\n        }));\n        process.stdout.write(`module.exports = ${JSON.stringify({ findings }, null, 2)};\\n`);\n        process.exit(0);\n      }\n    ).argv;\n}\n\nif (require.main === module) {\n  runCLI();\n}\n\ntype Filter = { findings: Omit<Finding, 'codeFrame'>[] };\n\nfunction loadFilter(options: { filter: string | undefined }): Filter | undefined {\n  if (options.filter) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    return require(resolve(options.filter));\n  }\n}\n\nfunction applyFilter(filter: Filter | undefined, results: AuditResults) {\n  if (filter) {\n    results.findings = results.findings.filter(finding => {\n      return !filter!.findings.find(filtered => {\n        return (\n          filtered.message === finding.message &&\n          filtered.detail === finding.detail &&\n          filtered.filename === finding.filename\n        );\n      });\n    });\n  }\n}\n\nfunction createFilter(filename: string, results: AuditResults) {\n  let findings = results.findings.map(f => ({\n    filename: f.filename,\n    message: f.message,\n    detail: f.detail,\n  }));\n  writeFileSync(filename, `module.exports = ${JSON.stringify({ findings }, null, 2)};\\n`);\n}\n"]}