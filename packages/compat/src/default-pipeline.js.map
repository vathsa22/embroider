{"version":3,"file":"default-pipeline.js","sourceRoot":"","sources":["default-pipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Options } from '.';\nimport { App, Addons as CompatAddons } from '.';\nimport type { PackagerConstructor, Variant, EmberAppInstance } from '@embroider/core';\nimport { toBroccoliPlugin } from '@embroider/core';\nimport { tmpdir } from '@embroider/core';\nimport type { Node } from 'broccoli-node-api';\nimport writeFile from 'broccoli-file-creator';\nimport mergeTrees from 'broccoli-merge-trees';\nimport { createHash } from 'crypto';\nimport { join, dirname } from 'path';\nimport { sync as pkgUpSync } from 'pkg-up';\n\nexport interface PipelineOptions<PackagerOptions> extends Options {\n  packagerOptions?: PackagerOptions;\n  onOutputPath?: (outputPath: string) => void;\n  variants?: Variant[];\n}\n\nexport function stableWorkspaceDir(appRoot: string, environment: string) {\n  let hash = createHash('md5');\n  hash.update(dirname(pkgUpSync({ cwd: appRoot })!));\n  hash.update(environment);\n  return join(tmpdir, 'embroider', hash.digest('hex').slice(0, 6));\n}\n\nexport default function defaultPipeline<PackagerOptions>(\n  emberApp: EmberAppInstance,\n  packager?: PackagerConstructor<PackagerOptions>,\n  options: PipelineOptions<PackagerOptions> = {}\n): Node {\n  let outputPath: string;\n  let addons;\n\n  let embroiderApp = new App(emberApp, options);\n\n  addons = new CompatAddons(embroiderApp);\n  addons.ready().then(result => {\n    outputPath = result.outputPath;\n  });\n\n  if (process.env.STAGE1_ONLY) {\n    return mergeTrees([addons.tree, writeFile('.stage1-output', () => outputPath)]);\n  }\n\n  if (process.env.STAGE2_ONLY || !packager) {\n    return mergeTrees([embroiderApp.asStage(addons).tree, writeFile('.stage2-output', () => outputPath)]);\n  }\n\n  let BroccoliPackager = toBroccoliPlugin(packager);\n  let variants = (options && options.variants) || defaultVariants(emberApp);\n  return new BroccoliPackager(embroiderApp.asStage(addons), variants, options && options.packagerOptions);\n}\n\nfunction hasFastboot(emberApp: EmberAppInstance | EmberAppInstance) {\n  return emberApp.project.addons.find(a => a.name === 'ember-cli-fastboot');\n}\n\nfunction defaultVariants(emberApp: EmberAppInstance): Variant[] {\n  let variants: Variant[] = [];\n  if (emberApp.env === 'production') {\n    variants.push({\n      name: 'browser',\n      runtime: 'browser',\n      optimizeForProduction: true,\n    });\n    if (hasFastboot(emberApp)) {\n      variants.push({\n        name: 'fastboot',\n        runtime: 'fastboot',\n        optimizeForProduction: true,\n      });\n    }\n  } else {\n    variants.push({\n      name: 'dev',\n      runtime: hasFastboot(emberApp) ? 'all' : 'browser',\n      optimizeForProduction: false,\n    });\n  }\n  return variants;\n}\n"]}