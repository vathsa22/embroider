{"version":3,"file":"get-real-addon.js","sourceRoot":"","sources":["get-real-addon.ts"],"names":[],"mappings":";AAAA,4EAA4E;AAC5E,6EAA6E;AAC7E,8EAA8E;AAC9E,2EAA2E;AAC3E,wDAAwD;;AAyBxD,+BAEC;AAzBD,IAAI,sBAA2B,CAAC;AAEhC,IAAI,CAAC;IACH,iEAAiE;IACjE,MAAM,oBAAoB,GAAG,OAAO,CAAC,6DAA6D,CAAC,CAAC;IAEpG,IAAI,oBAAoB,EAAE,CAAC;QACzB,sBAAsB,GAAG,oBAAoB,CAAC,eAAe,CAAC;IAChE,CAAC;AACH,CAAC;AAAC,OAAO,CAAC,EAAE,CAAC;IACX,uEAAuE;IACvE,4EAA4E;IAC5E,+BAA+B;IAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;QACxC,MAAM,CAAC,CAAC;IACV,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAwB,YAAY,CAAC,eAAoB;IACvD,OAAO,CAAC,sBAAsB,IAAI,eAAe,CAAC,sBAAsB,CAAC,CAAC,IAAI,eAAe,CAAC;AAChG,CAAC","sourcesContent":["// As of ember-cli@3.28, addon instances _may_ be proxied. This can become a\n// problem when patching (setting/restoring) methods on the addon instance or\n// comparing with the addon `__proto__`. The purpose of this util method is to\n// correctly return the _real_ (original) addon instance and not the proxy.\n// @see https://github.com/ember-cli/ember-cli/pull/9487\n\nlet TARGET_INSTANCE_SYMBOL: any;\n\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const targetInstanceModule = require('ember-cli/lib/models/per-bundle-addon-cache/target-instance');\n\n  if (targetInstanceModule) {\n    TARGET_INSTANCE_SYMBOL = targetInstanceModule.TARGET_INSTANCE;\n  }\n} catch (e) {\n  // we only want to handle the error when this module isn't found; i.e.,\n  // when a consumer of `ember-engines` is using an old version of `ember-cli`\n  // (less than `ember-cli` 3.28)\n  if (!e || e.code !== 'MODULE_NOT_FOUND') {\n    throw e;\n  }\n}\n\n/**\n * Given an addon instance, gets the _real_ addon instance\n * @param maybeProxyAddon - the addon instance, which may be a proxy\n * @returns the _real_ (not proxied) addon instance\n */\nexport default function getRealAddon(maybeProxyAddon: any): any {\n  return (TARGET_INSTANCE_SYMBOL && maybeProxyAddon[TARGET_INSTANCE_SYMBOL]) || maybeProxyAddon;\n}\n"]}