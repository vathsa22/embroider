{"version":3,"file":"snitch.js","sourceRoot":"","sources":["snitch.ts"],"names":[],"mappings":";;;;;AACA,qDAAyC;AACzC,0DAAiC;AAGjC;;;;;;EAME;AAEF,MAAqB,MAAO,SAAQ,wBAAM;IAKxC,YACE,SAAe,EACf,aAAgE,EAChE,aAA4B;QAE5B,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAP1B,cAAS,GAAG,IAAI,CAAC;QAQvB,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC;IACnD,CAAC;IAED,KAAK;QACH,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,QAAQ,GAAa,EAAE,CAAC;YAC5B,IAAA,mBAAQ,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAClE,IAAI,QAAQ,KAAK,UAAU,EAAE,CAAC;oBAC5B,OAAO;gBACT,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACtC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC,CAAC;YACH,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACxB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC;YACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,CAAC;QACD,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;CACF;AAjCD,yBAiCC","sourcesContent":["import type { Options as FunnelOptions } from 'broccoli-funnel';\nimport { Funnel } from 'broccoli-funnel';\nimport walkSync from 'walk-sync';\nimport type { Node } from 'broccoli-node-api';\n\n/*\n  This is used to monitor when addons are emitting badly-behaved broccoli\n  trees that don't follow directory-naming conventions.\n\n  We only check on the first build, on the assumption that it's rare to change\n  after that.\n*/\n\nexport default class Snitch extends Funnel {\n  private allowedPaths: RegExp;\n  private foundBadPaths: Function;\n  private mustCheck = true;\n\n  constructor(\n    inputTree: Node,\n    snitchOptions: { allowedPaths: RegExp; foundBadPaths: Function },\n    funnelOptions: FunnelOptions\n  ) {\n    super(inputTree, funnelOptions);\n    this.allowedPaths = snitchOptions.allowedPaths;\n    this.foundBadPaths = snitchOptions.foundBadPaths;\n  }\n\n  build() {\n    if (this.mustCheck) {\n      let badPaths: string[] = [];\n      walkSync(this.inputPaths[0], { directories: false }).map(filename => {\n        if (filename === '.gitkeep') {\n          return;\n        }\n        if (!this.allowedPaths.test(filename)) {\n          badPaths.push(filename);\n        }\n      });\n      if (badPaths.length > 0) {\n        this.foundBadPaths(badPaths);\n      }\n      this.mustCheck = false;\n    }\n    return super.build();\n  }\n}\n"]}