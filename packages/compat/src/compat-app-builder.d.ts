import type { Node as BroccoliNode } from 'broccoli-node-api';
import type { OutputPaths } from '@embroider/core';
import type Options from './options';
import type { V1Config } from './v1-config';
import type { Package } from '@embroider/core';
import type CompatApp from './compat-app';
export declare class CompatAppBuilder {
    private root;
    private origAppPackage;
    private appPackageWithMovedDeps;
    private options;
    private compatApp;
    private configTree;
    private synthVendor;
    private synthStyles;
    private assets;
    constructor(root: string, origAppPackage: Package, appPackageWithMovedDeps: Package, options: Required<Options>, compatApp: CompatApp, configTree: V1Config, synthVendor: Package, synthStyles: Package);
    private fastbootJSSrcDir;
    private extractAssets;
    private findTestemAsset;
    private activeAddonChildren;
    private get allActiveAddons();
    private isActiveAddon;
    private orderAddons;
    private resolvableExtensions;
    private emberEntrypoints;
    private modulePrefix;
    private podModulePrefix;
    private rootURL;
    private activeRules;
    private resolverConfig;
    private scriptPriority;
    private get resolvableExtensionsPattern();
    private impliedAssets;
    private impliedAddonAssets;
    private babelConfig;
    private insertEmberApp;
    private implicitScriptsAsset;
    private implicitStylesAsset;
    private implicitTestScriptsAsset;
    private implicitTestStylesAsset;
    private findActiveAddons;
    private partitionEngines;
    private get activeFastboot();
    private emberVersion;
    private get fastbootConfig();
    private engines;
    private updateAppJS;
    private prepareAsset;
    private prepareAssets;
    private assetIsValid;
    private updateOnDiskAsset;
    private updateInMemoryAsset;
    private updateBuiltEmberAsset;
    private updateConcatenatedAsset;
    private updateAssets;
    private gatherAssets;
    private firstBuild;
    build(inputPaths: OutputPaths<TreeNames>): Promise<void>;
    private combinePackageJSON;
    private etcOptions;
    private get portableHints();
    private addBabelConfig;
    private addResolverConfig;
    private shouldSplitRoute;
    private splitRoute;
    private topAppJSAsset;
    private get staticAppPathsPattern();
    private requiredOtherFiles;
    private appJSAsset;
    private importPaths;
    private routeEntrypoint;
    private testJSEntrypoint;
}
interface TreeNames {
    appJS: BroccoliNode;
    htmlTree: BroccoliNode;
    publicTree: BroccoliNode | undefined;
    configTree: BroccoliNode;
}
export {};
