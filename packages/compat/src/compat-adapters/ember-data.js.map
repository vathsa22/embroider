{"version":3,"file":"ember-data.js","sourceRoot":"","sources":["ember-data.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2DAAkC;AAClC,+BAA4B;AAC5B,2DAA6C;AAE7C,qCAA8C;AAC9C,oDAA4B;AAE5B,MAAa,aAAc,SAAQ,kBAAO;IACxC,0EAA0E;IAC1E,4EAA4E;IAC5E,sEAAsE;IACtE,EAAE;IACF,uEAAuE;IACvE,uBAAuB;IACvB,UAAU,CAAC,GAAG,KAAe;QAC3B,OAAO,KAAK,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,aAAkB;QAC1C,OAAO,gBAAM,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;CACF;AAdD,sCAcC;AAED,MAAqB,SAAU,SAAQ,aAAa;IAClD,6DAA6D;IAE7D,IAAI,OAAO;QACT,IAAI,WAAuB,CAAC;QAC5B,IAAI,CAAC;YACH,4DAA4D;YAC5D,iEAAiE;YACjE,WAAW,GAAG,OAAO,CAAC,IAAA,WAAI,EAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,SAAS,CAAC,GAAG,CAAC,CAAC;YACf,IAAI,CAAC;gBACH,wDAAwD;gBACxD,iEAAiE;gBACjE,WAAW,GAAG,OAAO,CAAC,IAAA,cAAW,EAAC,oDAAoD,EAAE;oBACtF,OAAO,EAAE,IAAI,CAAC,IAAI;iBACnB,CAAC,CAAC,CAAC;YACN,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,SAAS,CAAC,GAAG,CAAC,CAAC;gBACf,kDAAkD;gBAClD,iEAAiE;gBACjE,WAAW,GAAG,OAAO,CAAC,IAAA,cAAW,EAAC,2DAA2D,EAAE;oBAC7F,OAAO,EAAE,IAAI,CAAC,IAAI;iBACnB,CAAC,CAAC,CAAC;YACN,CAAC;QACH,CAAC;QAED,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC1B,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAC1B,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA/BD,4BA+BC;AA5BC;IADC,IAAA,4BAAO,GAAE;wCA4BT;AAGH,SAAS,SAAS,CAAC,GAAQ;IACzB,IAAI,GAAG,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;QACpC,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import V1Addon from '../v1-addon';\nimport { join } from 'path';\nimport { Memoize } from 'typescript-memoize';\nimport type { Node } from 'broccoli-node-api';\nimport { sync as resolveSync } from 'resolve';\nimport semver from 'semver';\n\nexport class EmberDataBase extends V1Addon {\n  // May of the ember-data packages use rollup to try to hide their internal\n  // structure. This is fragile and it breaks under embroider, and they should\n  // really move this kind of \"build-within-a-build\" to prepublish time.\n  //\n  // This disables any custom implementation of `treeForAddon`. The stock\n  // behavior is correct.\n  customizes(...names: string[]) {\n    return super.customizes(...names.filter(n => n !== 'treeForAddon'));\n  }\n\n  static shouldApplyAdapter(addonInstance: any) {\n    return semver.lt(addonInstance.pkg.version, '4.11.1');\n  }\n}\n\nexport default class EmberData extends EmberDataBase {\n  // ember-data needs its dynamically generated version module.\n  @Memoize()\n  get v2Trees() {\n    let versionTree: () => Node;\n    try {\n      // ember-data 3.10 and earlier kept the version module here.\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\n      versionTree = require(join(this.root, 'lib/version'));\n    } catch (err) {\n      handleErr(err);\n      try {\n        // ember-data 3.11 to 3.14 keep the version module here.\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        versionTree = require(resolveSync('@ember-data/-build-infra/src/create-version-module', {\n          basedir: this.root,\n        }));\n      } catch (err) {\n        handleErr(err);\n        // ember-data 3.15+ keeps the version module here.\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        versionTree = require(resolveSync('@ember-data/private-build-infra/src/create-version-module', {\n          basedir: this.root,\n        }));\n      }\n    }\n\n    let trees = super.v2Trees;\n    trees.push(versionTree());\n    return trees;\n  }\n}\n\nfunction handleErr(err: any) {\n  if (err.code !== 'MODULE_NOT_FOUND') {\n    throw err;\n  }\n}\n"]}