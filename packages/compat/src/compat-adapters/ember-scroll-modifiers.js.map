{"version":3,"file":"ember-scroll-modifiers.js","sourceRoot":"","sources":["ember-scroll-modifiers.ts"],"names":[],"mappings":";;;;;AAAA,2DAAkC;AAElC,eAAqB,SAAQ,kBAAO;IAClC,IAAI,WAAW;QACb,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;QAC7B,0GAA0G;QAC1G,mHAAmH;QACnH,IACE,IAAI,CAAC,kBAAkB,CAAC;YACxB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,KAAK,gCAAgC,CAAC,EACrG,CAAC;YACD,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAClE,CAAC;aAAM,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAChE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAfD,4BAeC","sourcesContent":["import V1Addon from '../v1-addon';\n\nexport default class extends V1Addon {\n  get packageMeta() {\n    let meta = super.packageMeta;\n    // observer-manager is injected with the undocumented package@service syntax without being app re-exported\n    // this makes sure that the service is always re-exported and injectable even when built with staticAddonTrees=true\n    if (\n      meta['implicit-modules'] &&\n      !meta['implicit-modules'].find(implicitModule => implicitModule === './services/observer-manager.js')\n    ) {\n      meta['implicit-modules'].push('./services/observer-manager.js');\n    } else if (!meta['implicit-modules']) {\n      meta['implicit-modules'] = ['./services/observer-manager.js'];\n    }\n    return meta;\n  }\n}\n"]}