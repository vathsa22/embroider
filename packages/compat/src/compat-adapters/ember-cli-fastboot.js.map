{"version":3,"file":"ember-cli-fastboot.js","sourceRoot":"","sources":["ember-cli-fastboot.ts"],"names":[],"mappings":"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","sourcesContent":["import V1Addon from '../v1-addon';\nimport Plugin from 'broccoli-plugin';\nimport type { Node } from 'broccoli-node-api';\nimport { readJSONSync, outputJSONSync } from 'fs-extra';\nimport { join } from 'path';\nimport writeFile from 'broccoli-file-creator';\nimport { Memoize } from 'typescript-memoize';\nimport bind from 'bind-decorator';\nimport type { AddonMeta } from '@embroider/core';\n\nexport default class EmberCliFastboot extends V1Addon {\n  customizes(...trees: string[]): boolean {\n    return trees.some(tree => {\n      if (tree === 'treeForPublic') {\n        // This is an optimization. It means we won't bother running\n        // ember-cli-fastboot's custom treeForPublic at all. We don't actually\n        // want *most* of what's in there, because embroider natively\n        // understands how to build each addon's treeForFastboot.\n        //\n        // But we do want *some*, so we handle those specific bits below in\n        // v2Trees.\n        return false;\n      } else {\n        return super.customizes(tree);\n      }\n    });\n  }\n  get v2Trees() {\n    let trees = super.v2Trees;\n\n    // We want to grab the fastboot config and rewrite it. We're going to strip\n    // out the expectedFiles that we know are already accounted for, and we're\n    // going to add app-factory.js which we know is not.\n    trees.push(\n      new RewriteManifest(this.addonInstance._buildFastbootConfigTree(this.rootTree), this.scriptFilter, [\n        'ember-cli-fastboot/app-factory.js',\n      ])\n    );\n\n    // We also still need to emit the fastboot app factory module. This emits\n    // the actual file into our package.\n    trees.push(writeFile('public/app-factory.js', this.appFactoryModule));\n\n    return trees;\n  }\n\n  get packageMeta() {\n    let meta = super.packageMeta;\n    if (!meta['public-assets']) {\n      meta['public-assets'] = {};\n    }\n    // we need to list app-factory.js as a public asset so it will make it's way\n    // into the app's final dist.\n    meta['public-assets']['./public/app-factory.js'] = 'ember-cli-fastboot/app-factory.js';\n    return meta;\n  }\n\n  // these are the default files that ember-cli-fastbot includes in its appFiles\n  // and vendorFiles that we know are already accounted for by the standard\n  // embroider build\n  @Memoize()\n  private expectedFiles(): string[] {\n    let outputPaths = this.addonInstance.app.options.outputPaths;\n    function stripLeadingSlash(filePath: string) {\n      return filePath.replace(/^\\//, '');\n    }\n    let appFilePath = stripLeadingSlash(outputPaths.app.js);\n    let appFastbootFilePath = appFilePath.replace(/\\.js$/, '') + '-fastboot.js';\n    let vendorFilePath = stripLeadingSlash(outputPaths.vendor.js);\n\n    // ember-auto-import emits this into the fastboot manifest. But embroider\n    // subsumes all of ember-auto-import, so we take responsibility for this\n    // stuff directly.\n    let autoImportPath = 'assets/auto-import-fastboot.js';\n\n    // the compat adapter for ember-asset-loader has already removed the code\n    // that reads from this file. And this file fails to get generated because\n    // we don't run ember-asset-loader's \"all\" postprocess tree. So we need to\n    // remove it here so it doesn't try to load.\n    let nodeAssetManifest = 'assets/node-asset-manifest.js';\n\n    return [appFilePath, appFastbootFilePath, vendorFilePath, autoImportPath, nodeAssetManifest];\n  }\n\n  @bind\n  private scriptFilter(file: string): boolean {\n    // we can drop all of engines-dist here because engines are handled natively\n    // by embroider (the engine code is part of the regular module graph)\n    return !this.expectedFiles().includes(file) && !file.startsWith('engines-dist/');\n  }\n\n  @Memoize()\n  private get appFactoryModule() {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const fastbootAppFactoryModule = require(join(this.root, 'lib/utilities/fastboot-app-factory-module.js'));\n    return fastbootAppFactoryModule(this.addonInstance._name, false);\n  }\n}\n\nclass RewriteManifest extends Plugin {\n  constructor(tree: Node, private scriptFilter: (file: string) => boolean, private extraAppFiles: string[]) {\n    super([tree], {\n      annotation: 'embroider-compat-adapter-ember-cli-fastboot',\n      persistentOutput: true,\n      needsCache: false,\n    });\n  }\n  build() {\n    let json = readJSONSync(join(this.inputPaths[0], 'package.json'));\n\n    let extraAppFiles = (json.fastboot.manifest.appFiles as string[]).filter(this.scriptFilter);\n\n    for (let file of this.extraAppFiles) {\n      extraAppFiles.push(file);\n    }\n\n    let extraVendorFiles = (json.fastboot.manifest.vendorFiles as string[]).filter(this.scriptFilter);\n\n    // we're using our own new style of fastboot manifest that loads everything\n    // via the HTML. HTML is better understood by tools beyond Ember and\n    // Fastboot, so it's more robust to going through third-party bundlers\n    // without breaking. We can get by with only a very small extension over\n    // purely standards-compliant HTML.\n    json.fastboot = {\n      schemaVersion: 5,\n      htmlEntrypoint: 'index.html',\n      moduleWhitelist: json.fastboot.moduleWhitelist,\n      hostWhitelist: json.fastboot.hostWhitelist,\n    };\n\n    // this is a message to Embroider stage2 (in app.ts), because we need it to\n    // arrange the one special extension to HTML that we need: fastboot-only\n    // script tags.\n    //\n    // Fastboot only javascript *modules* don't need any magic, because our\n    // macro system can guard them. That is the preferred way to have\n    // fastboot-only code. But for backward compatibility, we also support\n    // fastboot-only *scripts*, and those do need a bit of magic, in the form of\n    // <fastboot-script> tags.\n    json['embroider-fastboot'] = {\n      extraAppFiles,\n      extraVendorFiles,\n    };\n\n    // because we contain a subdir with its own package.json, that subdir\n    // becomes a \"package\" from emroider's perspective, and if we want it to get\n    // treated as ember code it needs to have v2 addon metadata\n    json.keywords = [...(json.keywords ?? []), 'ember-addon'];\n    let meta: AddonMeta = {\n      type: 'addon',\n      version: 2,\n      'auto-upgraded': true,\n    };\n    json['ember-addon'] = meta;\n\n    outputJSONSync(join(this.outputPath, '_fastboot_', 'package.json'), json, { spaces: 2 });\n  }\n}\n"]}