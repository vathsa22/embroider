{"version":3,"file":"ember-source.js","sourceRoot":"","sources":["ember-source.ts"],"names":[],"mappings":"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","sourcesContent":["import V1Addon from '../v1-addon';\nimport buildFunnel from 'broccoli-funnel';\nimport mergeTrees from 'broccoli-merge-trees';\nimport AddToTree from '../add-to-tree';\nimport { outputFileSync, readFileSync, readdirSync, unlinkSync } from 'fs-extra';\nimport { join, resolve } from 'path';\nimport { Memoize } from 'typescript-memoize';\nimport { satisfies } from 'semver';\nimport { transform } from '@babel/core';\nimport type * as Babel from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport Plugin from 'broccoli-plugin';\nimport type { Node } from 'broccoli-node-api';\nimport { existsSync } from 'fs';\n\nexport default class extends V1Addon {\n  get v2Tree() {\n    return mergeTrees([super.v2Tree, buildFunnel(this.rootTree, { include: ['dist/ember-template-compiler.js'] })]);\n  }\n\n  private get useStaticEmber(): boolean {\n    return this.app.options.staticEmberSource;\n  }\n\n  // versions of ember-source prior to\n  // https://github.com/emberjs/ember.js/pull/20675 ship dist/packages and\n  // dist/dependencies separately and the imports between them are package-name\n  // imports. Since many of the dependencies are also true package.json\n  // dependencies (in order to get typescript types), and our module-resolver\n  // prioritizes true dependencies, it's necessary to detect and remove the\n  // package.json dependencies.\n  //\n  // After the above linked change, ember-source ships only dist/packages and\n  // the inter-package imports are all relative. Some of the things in\n  // dist/packages are still the rolled-in dependencies, but now that the\n  // imports are all relative we need no special handling for them (beyond the\n  // normal v2 addon renamed-modules support.\n  @Memoize()\n  private get includedDependencies() {\n    let result: string[] = [];\n    let depsDir = resolve(this.root, 'dist', 'dependencies');\n    if (!existsSync(depsDir)) {\n      return result;\n    }\n    for (let name of readdirSync(depsDir)) {\n      if (name[0] === '@') {\n        for (let innerName of readdirSync(resolve(this.root, 'dist', 'dependencies', name))) {\n          if (innerName.endsWith('.js')) {\n            result.push(name + '/' + innerName.slice(0, -3));\n          }\n        }\n      } else {\n        if (name.endsWith('.js')) {\n          result.push(name.slice(0, -3));\n        }\n      }\n    }\n    return result;\n  }\n\n  get newPackageJSON() {\n    let json = super.newPackageJSON;\n    if (this.useStaticEmber) {\n      for (let name of this.includedDependencies) {\n        // weirdly, many of the inlined dependency are still listed as real\n        // dependencies too. If we don't delete them here, they will take\n        // precedence over the inlined ones, because the embroider module-resolver\n        // tries to prioritize real deps.\n        delete json.dependencies?.[name];\n      }\n    }\n    return json;\n  }\n\n  customizes(treeName: string) {\n    if (this.useStaticEmber) {\n      // we are adding custom implementations of these\n      return treeName === 'treeForAddon' || treeName === 'treeForVendor' || super.customizes(treeName);\n    } else {\n      return super.customizes(treeName);\n    }\n  }\n\n  invokeOriginalTreeFor(name: string, opts: { neuterPreprocessors: boolean } = { neuterPreprocessors: false }) {\n    if (this.useStaticEmber) {\n      if (name === 'addon') {\n        return this.customAddonTree();\n      }\n      if (name === 'vendor') {\n        return this.customVendorTree();\n      }\n    }\n    return super.invokeOriginalTreeFor(name, opts);\n  }\n\n  // Our addon tree is all of the \"packages\" we share. @embroider/compat already\n  // supports that pattern of emitting modules into other package's namespaces.\n  private customAddonTree() {\n    let packages = buildFunnel(this.rootTree, {\n      srcDir: 'dist/packages',\n    });\n\n    let trees: Node[] = [\n      packages,\n      buildFunnel(this.rootTree, {\n        srcDir: 'dist/dependencies',\n        allowEmpty: true,\n      }),\n    ];\n\n    if (satisfies(this.packageJSON.version, '>= 4.0.0-alpha.0 <4.10.0-alpha.0', { includePrerelease: true })) {\n      // import { loc } from '@ember/string' was removed in 4.0. but the\n      // top-level `ember` package tries to import it until 4.10. A\n      // spec-compliant ES modules implementation will treat this as a parse\n      // error.\n      trees.push(new FixStringLoc([packages]));\n    }\n\n    return mergeTrees(trees, { overwrite: true });\n  }\n\n  // We're zeroing out these files in vendor rather than deleting them, because\n  // we can't easily intercept the `app.import` that presumably exists for them,\n  // so rather than error they will just be empty.\n  //\n  // The reason we're zeroing these out is that we're going to consume all our\n  // modules directly out of treeForAddon instead, as real modules that webpack\n  // can see.\n  private customVendorTree() {\n    return new AddToTree(this.addonInstance._treeFor('vendor'), outputPath => {\n      unlinkSync(join(outputPath, 'ember', 'ember.js'));\n      outputFileSync(join(outputPath, 'ember', 'ember.js'), '');\n      unlinkSync(join(outputPath, 'ember', 'ember-testing.js'));\n      outputFileSync(join(outputPath, 'ember', 'ember-testing.js'), '');\n    });\n  }\n\n  get packageMeta() {\n    let meta = super.packageMeta;\n    if (this.useStaticEmber) {\n      if (!meta['implicit-modules']) {\n        meta['implicit-modules'] = [];\n      }\n      meta['implicit-modules'].push('./ember/index.js');\n      // before 5.6, Ember uses the AMD loader to decide if it's test-only parts\n      // are present, so we must ensure they're registered. After that it's\n      // enough to evaluate ember-testing, which @embroider/core is hard-coded\n      // to do in the backward-compatible tests bundle.\n      if (!satisfies(this.packageJSON.version, '>= 5.6.0-alpha.0', { includePrerelease: true })) {\n        if (!meta['implicit-test-modules']) {\n          meta['implicit-test-modules'] = [];\n        }\n        meta['implicit-test-modules'].push('./ember-testing/index.js');\n      }\n    }\n    return meta;\n  }\n}\n\nclass FixStringLoc extends Plugin {\n  build() {\n    let inSource = readFileSync(resolve(this.inputPaths[0], 'ember', 'index.js'), 'utf8');\n    let outSource = transform(inSource, {\n      plugins: [fixStringLoc],\n      configFile: false,\n    })!.code!;\n    outputFileSync(resolve(this.outputPath, 'ember', 'index.js'), outSource, 'utf8');\n  }\n}\n\nfunction fixStringLoc(babel: typeof Babel) {\n  let t = babel.types;\n  return {\n    visitor: {\n      Program(path: NodePath<Babel.types.Program>) {\n        path.node.body.unshift(\n          t.variableDeclaration('const', [t.variableDeclarator(t.identifier('loc'), t.identifier('undefined'))])\n        );\n      },\n      ImportDeclaration: {\n        enter(path: NodePath<Babel.types.ImportDeclaration>, state: { inEmberString: boolean }) {\n          if (path.node.source.value === '@ember/string') {\n            state.inEmberString = true;\n          }\n        },\n        exit(_path: NodePath<Babel.types.ImportDeclaration>, state: { inEmberString: boolean }) {\n          state.inEmberString = false;\n        },\n      },\n      ImportSpecifier(path: NodePath<Babel.types.ImportSpecifier>, state: { inEmberString: boolean }) {\n        let name = 'value' in path.node.imported ? path.node.imported.value : path.node.imported.name;\n        if (state.inEmberString && name === 'loc') {\n          path.remove();\n        }\n      },\n    },\n  };\n}\n"]}