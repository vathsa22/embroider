import type { Node as BroccoliNode } from 'broccoli-node-api';
import type { Stage, Package } from '@embroider/core';
import type Options from './options';
import { V1Config } from './v1-config';
import { ReadV1AppBoot } from './v1-appboot';
import type { EmberAppInstance } from '@embroider/core';
import type { TransformOptions } from '@babel/core';
import { MacrosConfig } from '@embroider/macros/src/node';
import type { Transform } from 'babel-plugin-ember-template-compilation';
export default class CompatApp {
    readonly legacyEmberAppInstance: EmberAppInstance;
    private annotation;
    private active;
    readonly options: Required<Options>;
    private _publicAssets;
    private _implicitScripts;
    private _implicitStyles;
    private get isDummy();
    get name(): string;
    get env(): string;
    get root(): string;
    private get emberCLILocation();
    get hasCompiledStyles(): boolean;
    private requireFromEmberCLI;
    private get configReplace();
    private get configLoader();
    private get appUtils();
    get addonTreeCache(): Map<string, BroccoliNode>;
    get preprocessRegistry(): any;
    get shouldBuildTests(): boolean;
    configPath(): string;
    private get configTree();
    private get config();
    get testConfig(): V1Config | undefined;
    get autoRun(): boolean;
    get appBoot(): ReadV1AppBoot;
    private get storeConfigInMeta();
    private get configReplacePatterns();
    private get htmlTree();
    private get indexTree();
    private get testIndexTree();
    babelConfig(): TransformOptions;
    babelMajorVersion(): 7;
    private transformedNodeFiles;
    private preresolvedNodeFile;
    private combinedVendor;
    private addOtherAssets;
    private addNodeAssets;
    synthesizeVendorPackage(addonTrees: BroccoliNode[]): BroccoliNode;
    private combinedStyles;
    synthesizeStylesPackage(addonTrees: BroccoliNode[]): BroccoliNode;
    private applyCustomTransforms;
    private remapAsset;
    private preprocessJS;
    get htmlbarsPlugins(): Transform[];
    private get appTree();
    private get testsTree();
    private get lintTree();
    private get vendorTree();
    private ensureTree;
    private get preprocessors();
    private get publicTree();
    private processAppJS;
    private withoutRootURL;
    findAppScript(scripts: HTMLScriptElement[], entrypoint: string): HTMLScriptElement;
    findAppStyles(styles: HTMLLinkElement[], entrypoint: string): HTMLLinkElement;
    findVendorScript(scripts: HTMLScriptElement[], entrypoint: string): HTMLScriptElement;
    findVendorStyles(styles: HTMLLinkElement[], entrypoint: string): HTMLLinkElement;
    findTestSupportStyles(styles: HTMLLinkElement[]): HTMLLinkElement | undefined;
    findTestSupportScript(scripts: HTMLScriptElement[]): HTMLScriptElement | undefined;
    findTestScript(scripts: HTMLScriptElement[]): HTMLScriptElement | undefined;
    readonly macrosConfig: MacrosConfig;
    constructor(legacyEmberAppInstance: EmberAppInstance, _options?: Options);
    private inTrees;
    appPackage(): Package;
    private instantiate;
    asStage(prevStage: Stage): Stage;
}
